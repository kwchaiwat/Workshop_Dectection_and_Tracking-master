{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Variables\n",
    "\n",
    "- variables หรือตัวแปร เอาไว้สำหรับเก็บข้อมูล หรือก็เปรียบเสมือนการตั้งชื่อ เพื่อให้เราไว้กำหนด หรือระบุตัวได้ถูกต้อง การประกาศตัวแปร จะใช้เครื่องหมายเท่ากับ - (=) เรียกว่า assignment operator\n",
    "- a = b = 2 คือ chained assignment เป็นการกำหนดค่า 2 ให้กับ a และ b\n",
    "- ตัวแปร (variable) สามารถตั้งชื่อได้เฉพาะ ตัวอักษร ตัวเลข และ underscore(_) ไม่สามารถขึ้นต้นด้วยตัวเลขได้\n",
    "- ตัวเลขจะมี Type อยู่ 2 ประเภทคือ integers และ floats โดย integers คือตัวเลขธรรมดา ส่วน floats คือตัวเลขที่มีจุดทศนิยม"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "การตั้งชื่อตัวแปร นิยมใช้การตั้งชื่อแบบ snake_case ก็คือใช้ตัวพิมพ์เล็กทั้งหมดและแบ่งคำด้วย underscore(_) เช่น awesome_name = \"John Doe\" เป็นต้น"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- เช็ค Type ของตัวแปรต่างๆ ได้โดยฟังชั่น type() เช่น type(999)\n",
    "- เราสามารถ convert จาก integer ไป float หรือ float ไป integer ได้ โดยใช้ built-in functions เช่น"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "float_number = float(10)    # แปลงค่า integer เป็น float\n",
    "number = int(35.321)        # แปลงค่า float เป็น integer\n",
    "word = str(number)          # แปลงค่า integer เป็น string"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- operator หรือตัวดำเนินการต่างๆ ก็สามารถใช้งานได้เหมือนกับ programming language ภาษาอื่นๆเลย ไม่ว่าจะเป็น + - * / % ** เช่น"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 20 + 20     # บวก\n",
    "b = 20 - 10     # ลบ\n",
    "c = 2 * 2       # คูณ\n",
    "d = 10 / 2      # หาร\n",
    "e = 2 ** 4      # ยกกำลัง (2 ยกกำลัง 4)\n",
    "f = 10 % 2      # modulo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- augmented assignment คือการรวม operation และ assignment 2 คำสั่ง ด้วยการใช้เพียง statement เดียว เช่น"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = 10\n",
    "result += 5  # result = 15"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- เป็นการ เพิ่มค่า result เท่ากับ 5 และอัพเดทค่า รวมกลายเป็น result จะเท่ากับ 15\n",
    "\n",
    "- Boolean มีค่าได้เพียงแค่ 2 ชนิดคือ ไม่ True ก็ False โดยใช้เครื่องหมาย == เรียกว่า equality operator ในการเช็คหรือเปรียบเทียบตัวแปรสองตัว ว่ามีค่าเหมือนกันหรือไม่ เช่น"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "one = 1\n",
    "two = 2\n",
    "print(one == two)  # False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- นอกจากการเปรียบเทียบด้วย == แล้ว เรายังสามารถเปรียบเทียบด้วย >= (มากกว่าหรือเท่ากับ) <= (น้อยกว่าหรือเท่ากับ) > (มากกว่า) และ < (น้อยกว่า)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Strings\n",
    "\n",
    "- การรวม String 2 ตัวเข้าด้วยกัน (combine) จะใช้เครื่องหมาย + เช่น"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello Chai\n"
     ]
    }
   ],
   "source": [
    "name = \"Chai\"\n",
    "hello = \"Hello \" + name\n",
    "print(hello) # Hello Chai"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Python สามารถใช้ String คูณด้วย integer ได้ด้วย เช่น \"Hello\" * 10\n",
    "- String ใน Python เก็บค่าแต่ละ characters เป็น index โดยเริ่มต้นจาก index = 0 ตัวอย่าง คำว่า DevAhoy\n",
    "- สามารถใช้ค่าติดลบ ในการเข้าถึง index ของ String ได้ โดยจะเริ่มทำการนับจากด้านหลังมาด้านหน้า"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A\n",
      "y\n",
      "o\n"
     ]
    }
   ],
   "source": [
    "result = \"DevAhoy\"\n",
    "\n",
    "#   D    e    v    A    h    o    y\n",
    "#  [0]  [1]  [2]  [3]  [4]  [5]  [6]  # นับจาก หน้าไปหลัง\n",
    "# [-7] [-6] [-5] [-4] [-3] [-2] [-1]  # นับจาก หลังไปหน้า\n",
    "\n",
    "\n",
    "print(result[3])    # A\n",
    "print(result[6])    # y\n",
    "print(result[-2])   # o"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Slice หรือ substring คือการตัดคำ syntax คือ str[index1:index2] เช่น"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dev\n",
      "Ahoy\n",
      "Ahoy\n"
     ]
    }
   ],
   "source": [
    "name = \"DevAhoy\"\n",
    "print(name[:3])   # Dev   (มีค่าเท่ากับ `name[0:3]`)\n",
    "print(name[3:7])  # Ahoy\n",
    "print(name[3:])   # Ahoy  (มีค่าเท่ากับ `name[3:7]`)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
